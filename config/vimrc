"vim-plug {{{
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-sensible'
Plug 'hanhanW/molokai'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'scrooloose/nerdcommenter'
Plug 'Yggdroot/indentLine'
"Plug 'Valloric/YouCompleteMe'
Plug 'vim-ruby/vim-ruby'
Plug 'sheerun/vim-polyglot'
Plug 'rhysd/clever-f.vim'
Plug 'hanhanW/vim-trailing-whitespace'
Plug 'itchyny/lightline.vim'
Plug 'Konfekt/FastFold'
Plug 'airblade/vim-gitgutter'
Plug 'mbbill/undotree'
Plug 'mhinz/vim-signify'
Plug 'mbbill/undotree'

call plug#end()
" }}}

filetype indent plugin on

syntax on
set autoread
set autoindent                  " (ai) turn on auto-indenting (great for programers)
set showmatch                   " (sm) briefly jump to matching bracket when inserting one
set number                      " (nu) show line numbers
set ruler                       " (ru) show the cursor position at all times
set incsearch                   " (is) highlights what you are searching for as you type
set hlsearch                    " (hls) highlights all instances of the last searched string
set ignorecase                  " (ic) ignores case in search patterns
set smartcase                   " (scs) don't ignore case when the search pattern has uppercase
set showcmd                     " (sc) display an incomplete command in the lower right
set history=10000
set nowrap
set wildmenu
set expandtab
set mouse=a
set backspace=indent,eol,start
set shiftwidth=2
set tabstop=2
set softtabstop=2
set shiftwidth=2
set laststatus=2
set textwidth=80                " (tw) number of columns before an automatic line break is inserted
                                " (see formatoptions)
set colorcolumn=+1
set fileencodings=utf8
set encoding=utf8
set background=dark
set pastetoggle=<F2>

inoremap jk <Esc>

" Move swap/undo files. {{{
" Save your swp files to a less annoying place than the current directory.
" If you have .vim-swap in the current directory, it'll use that.
" Otherwise it saves it to ~/.vim/swap, ~/tmp or .
if isdirectory($HOME . '/.vim/swap') == 0
  :silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
endif
set directory=./.vim-swap//
set directory+=~/.vim/swap//
set directory+=~/tmp//
set directory+=.

if exists("+undofile")
  " undofile - This allows you to use undos after exiting and restarting
  " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo,
  " then .
  " :help undo-persistence
  " This is only present in 7.3+
  if isdirectory($HOME . '/.vim/undo') == 0
    :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
  endif
  set undodir=./.vim-undo//
  set undodir+=~/.vim/undo//
  set undodir+=.
  set undofile
endif
" }}}

" => Map leader settings {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 "Set map leader to " "
let mapleader = " "
let maplocalleader = " "
let g:mapleader = " "
let g:maplocalleader = " "
runtime .vimrc_leader
" }}}

" auto reload vimrc
autocmd! BufWritePost . source %

highlight Normal ctermbg=None

"autocmd BufNewFile *.cpp 0r ~/Templates/default.cpp
"autocmd BufNewFile exp.rb 0r ~/Templates/exp.rb

autocmd FileType Makefile setlocal noexpandtab
autocmd FileType cpp set makeprg=g++\ -g\ -Wall\ -Wshadow\ -O2\ -std=c++14\ -DDARKHH\ -o\ %<\ %
autocmd FileType c set makeprg=gcc\ -g\ -Wall\ -Wshadow\ -O2\ -std=c11\ -o\ %<\ %
autocmd FileType tex set syntax=tex makeprg=xelatex\ -interaction=nonstopmode\ %
autocmd FileType tex let g:indentLine_enabled=0
autocmd FileType json let g:indentLine_enabled=0
autocmd BufNewFile,BufRead *.mlir set formatoptions+=l

set foldmarker={{{,}}}
set foldmethod=marker
set foldlevel=0
set foldnestmax=3

function! QFSwitch()
    redir => ls_output
    execute ':silent! ls'
    redir END

    let exists = match(ls_output, "[Quickfix List")
    if exists == -1
        execute ':copen'
    else
        execute ':cclose'
    endif
endfunction
func! Exc()
	let curr_file = expand('%:e')
	if curr_file == "c" || curr_file == "cpp" || curr_file == "hs"
		exec "!./%<"
	elseif curr_file == "py"
		exec ":w"
		exec "! python %"
	elseif curr_file == "tex"
		exec "silent ! evince %<.pdf > /dev/null 2>&1 &"
		exec ":redraw!"
  elseif curr_file == "rb"
    exec ":w"
    exec "! ruby %"
	endif
endfunc

func! Exc_with_fin()
	exec "!./%< < %<.in"
endfunc

if $TERM =~ '^screen-256color'
    map <Esc>OH <Home>
    map! <Esc>OH <Home>
    map <Esc>OF <End>
    map! <Esc>OF <End>
endif

nnoremap ; :
vnoremap ; :
nnoremap <leader>t :tabe<Space>
nnoremap <F7> <ESC>:wa<CR>:mak<CR>
imap <F7> <ESC>:wa<CR>:mak<CR>
nnoremap <F8> :call QFSwitch()<CR>
nnoremap <F9> :call Exc()<CR>
nmap <Tab> :tabnext<CR>
nmap <S-Tab> :tabprev<CR>
cmap w!! w !sudo tee % > /dev/null

" --- NERD Commenter plugin --- {{{
let g:NERDCreateDefaultMappings = 0
let g:NERDSpaceDelims = 0
map <leader>cc <plug>NERDCommenterComment
map <leader>cu <plug>NERDCommenterUncomment
map <leader>c<space> <plug>NERDCommenterToggle
" }}}

" --- YCM plugin --- {{{
let g:ycm_confirm_extra_conf = 0
"set completeopt-=preview
let g:ycm_key_list_select_completion = ['<TAB>']
let g:ycm_key_list_previous_completion = ['<S-TAB>']
let g:ycm_autoclose_preview_window_after_completion = 0
" }}}

" --- fzf plugin --- {{{
"nnoremap <leader>ff <ESC>:FZF<CR>
"nnoremap <leader>bf <ESC>:Buffers<CR>
" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'
" }}}

" undotree {{{
nnoremap <Leader>u :UndotreeToggle<CR>
" }}}

" Paste {{{
" http://stackoverflow.com/questions/5585129

if &term =~ "xterm.*" || exists("$TMUX")

    " enable/disable bracketed paste mode
    let &t_ti = &t_ti . "\e[?2004h"
    let &t_te = "\e[?2004l" . &t_te

    function! XTermPasteBegin(ret)
        " stop paste mode when bracketed end
        set pastetoggle=<f14>
        " start paste mode
        set paste
        " extra command code to which it'll be mapped
        return a:ret
    endfunction

    nnoremap <expr> <f13> XTermPasteBegin("i")
    inoremap <expr> <f13> XTermPasteBegin("")
    vnoremap <expr> <f13> XTermPasteBegin("c")

    " do nothing when we're in command mode
    cnoremap <f13> <nop>
    cnoremap <f14> <nop>

endif

" }}}

inoremap <expr> <Down> pumvisible() ? "\<C-E>\<Down>" : "\<Down>"
inoremap <expr> <Up> pumvisible() ? "\<C-E>\<Up>" : "\<Up>"

let g:indentLine_char = "â”‚"
let g:polyglot_disabled = ['python', 'c/c++', 'c++11']
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ }

xmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)

if filereadable( expand("$HOME/.vim/plugged/molokai/colors/molokai.vim") )
  colorscheme molokai
else
  colorscheme torte
endif

if filereadable( expand("$HOME/.lvimrc") )
  source ~/.lvimrc
endif
